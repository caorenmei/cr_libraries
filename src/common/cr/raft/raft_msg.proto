syntax = "proto3";
package cr.raft.pb;

// 日志条目
message Entry
{
    uint64 index = 1;
    // 任期
    uint64 term = 2;
    // 数据
    bytes value = 3;
}

// 附加日志
message AppendEntriesReq
{
    // 领导人的任期号
    uint64 leader_term = 1;
    // 新的日志条目紧随之前的索引值
    uint64 prev_log_index = 2;
    // prevLogIndex 条目的任期号
    uint64 prev_log_term = 3;
    // 准备存储的日志条目（表示心跳时为空；一次性发送多个是为了提高效率）
    repeated Entry entries = 4;
    // 领导人已经提交的日志的索引值
    uint64 leader_commit = 5;
}

// 附加回复
message AppendEntriesResp
{
    // 当前的任期号，用于领导人去更新自己
    uint64 follower_term = 1;
    // 领导者的任期
    uint64 leader_term = 2;
    // 追加日志的索引
    uint64 append_log_index = 3;
    // 最后的日志索引值
    uint64 last_log_index = 4;
    // 跟随者包含了匹配上 prevLogIndex 和 prevLogTerm 的日志时为真
    bool success = 5;  
}

// 请求投票
message RequestVoteReq
{
    // 候选人的任期号
    uint64 candidate_term = 1;
    // 候选人的最后日志条目的索引值
    uint64 last_log_index = 2;
    // 候选人最后日志条目的任期号
    uint64 last_log_term = 3;
}

// 请求投票回复
message RequestVoteResp
{
    // 当前的任期号，用于领导人去更新自己
    uint64 follower_term = 1;
    // 候选人的任期号
    uint64 candidate_term = 2;
    // 候选人赢得了此张选票时为真
    bool success = 3;
}

// raft 消息
message RaftMsg
{
    // 源节点Id
    uint64 from_node_id = 1;
    // 目标节点 Id
    uint64 dest_node_id = 2;
    // 实例 Id
    uint64 instance_id = 3;
    // 消息体
    oneof body
    {
        // 附加日志
        AppendEntriesReq append_entries_req = 4;
        // 附加日志回复
        AppendEntriesResp append_entries_resp = 5;
        // 请求投票
        RequestVoteReq request_vote_req = 6;
        // 请求投票回复
        RequestVoteResp request_vote_resp = 7;
    }
}